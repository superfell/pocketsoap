/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is pocketSOAP.

The Initial Developer of the Original Code is Simon Fell.
Portions created by Simon Fell are Copyright (C) 2002
Simon Fell. All Rights Reserved.

Contributor(s):
*/

// Attachments.idl : IDL source for Attachments.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (Attachments.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

import "..\psoap_core\psoap.idl" ;
#include <winerror.h>	// for MAKE_HRESULT

[
	object,
	uuid(4D0455C7-7073-4c0d-A739-ADCFF6DEF5E6),
	local,
	helpstring("IPartPayload Interface"),
	pointer_default(unique)
]
interface IPartPayload : IStreamReader
{
	HRESULT Lock() ;	// this should lock the underlying resource, so it can't change size
	HRESULT Unlock() ;
	HRESULT Size(DWORD * cb) ;	
} ;

[
	object,
	uuid(085DC0B1-C055-4dba-8415-3C09DD7F7E01),
	local,
	helpstring("IPartPayloadProvider Interface"),
	pointer_default(unique)
]
interface IPartPayloadProvider : IUnknown
{
	HRESULT PartPayload([out,retval] IPartPayload ** payload ) ;
} ;

[
	uuid(347A2AB2-410E-4013-8085-A87452EC2289),
	version(1.0),
	helpstring("PocketSOAP Attachments 1.5.1 Type Library")
]
library PocketSOAPAttachments
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");
	importlib("..\pSOAP_W32\pSOAP32.tlb");

	typedef enum AttachmentFormat
	{
		formatMime,
		formatDime
	} AttachmentFormat ;

	typedef enum AttachmentLocation
	{
		attOnDisk,
		attInMemory
	} AttachmentLocation ;

	typedef enum TypeNameFormat
    {
		tnfUnchanged   = 0x00, // used for chunking
		tnfMediaType   = 0x01, //  as defined in RFC2616
		tnfAbsoluteURI = 0x02, //  as defined in RFC2396
		tnfUnknown     = 0x03, //  
		tnfNone		   = 0x04, //  
		tnfReserved1   = 0x05,
		tnfReserved2   = 0x06,
		tnfReserved3   = 0x07
	} TypeNameFormat ;

	[
		object,
		uuid(B7690739-180E-45f2-97CC-48F2C5B0DA0C),
		oleautomation,
		helpstring("ISoapAttachmentFormat Interface"),
		pointer_default(unique)
	]
	interface ISoapAttachmentFormat : IUnknown
	{
		[propget, helpstring("property Format")] HRESULT Format([out, retval] AttachmentFormat *pVal);
		[propput, helpstring("property Format")] HRESULT Format([in] AttachmentFormat newVal);
	};

	[
		object,
		uuid(0C834F57-592B-449b-B6A7-EFB1FE21BE69),
		oleautomation,
		helpstring("ISoapAttachment Interface"),
		pointer_default(unique)
	]
	interface ISoapAttachment : ISoapAttachmentFormat
	{
		// todo: need to add Content-Location
		// todo: refactor into base attachment and extension interfaces for mime & dime specific goo ?
		[helpstring("Sets the body & contentType in one go, will also create a new contentId")] 
			      HRESULT Initialize		( [in] VARIANT body, [in] TypeNameFormat typeNameFormat, [in] BSTR TypeName ) ;
		[propget] HRESULT Body				( [out,retval] VARIANT * pVal ) ;
		[propput] HRESULT Body				( [in] VARIANT body ) ;
		[propget] HRESULT TypeNameFormat	( [out,retval] TypeNameFormat * tnf ) ;
		[propput] HRESULT TypeNameFormat	( [in] TypeNameFormat tnf ) ;
		[propget] HRESULT TypeName			( [out,retval] BSTR * contentType ) ;
		[propput] HRESULT TypeName			( [in] BSTR contentType ) ;
		[propget] HRESULT ContentId			( [out,retval] BSTR * contentId ) ;
		[propput] HRESULT ContentId			( [in] BSTR contentId ) ;
		[propget] HRESULT Located			( [out,retval] AttachmentLocation * loc ) ;

		[propget, helpstring("builds a URI that can be used to reference this attachment")] 
				  HRESULT Uri		  ( [out,retval] BSTR * uri ) ;
		[propput] HRESULT Uri		  ( [in] BSTR uri ) ;

		[helpstring("Converts an InMemory attachment to an OnDisk Attachment")]
				  HRESULT Save		  ( [in] BSTR fileName ) ;	
	} ;

	[
		object,
		uuid(27EA280D-FC94-46f4-B18E-9EEEB6BD915E),
		oleautomation,
		helpstring("ISoapAttachments Interface"),
		pointer_default(unique)
	]
	interface ISoapAttachments : ISoapAttachmentFormat
	{
		[propget, id(DISPID_NEWENUM), helpstring("property _NewEnum")] HRESULT _NewEnum([out, retval] IUnknown **pVal);
		[propget] HRESULT Count			( [out,retval] long * Count ) ;
		[propget] HRESULT Item			( [in] long idx,  [out,retval] ISoapAttachment ** attachment ) ;
				  HRESULT Find          ( [in] BSTR uri,  [out,retval] ISoapAttachment ** attachment ) ;
				  HRESULT Append		( [in] ISoapAttachment * newNode);
				  HRESULT Clear			( );
				  HRESULT Create		(	[in] Variant src,
											[in] TypeNameFormat tnf,
											[in] BSTR TypeName,
											[out,retval] ISoapAttachment ** attachment ) ;
	};

	[
		object,
		uuid(35DC7342-3D83-4b31-8552-F25A7E5C4792),
		oleautomation,
		helpstring("IAttachmentManger Interface"),
		pointer_default(unique)
	]
	interface IAttachmentManger : ISoapAttachmentFormat
	{
		// when receiving, this is the point where it switches to writing to disk instead.
		[propget, helpstring("property DiskThreshhold")] HRESULT DiskThreshold ( [out, retval] long *pVal );
		[propput, helpstring("property DiskThreshhold")] HRESULT DiskThreshold ( [in] long newVal );

		[propget]    HRESULT Transport ( [out,retval] ISOAPTransport ** theTransport ) ;
		[propputref] HRESULT Transport ( [in]		  ISOAPTransport *  theTransport ) ;

		[propget]	 HRESULT Request   ( [out,retval] ISoapAttachments ** collection ) ;
		[propget]	 HRESULT Response  ( [out,retval] ISoapAttachments ** collection ) ;
	};

	[
		object,
		uuid(A56557C9-AA8C-4cba-9DF2-B5285F73E0EE),
		oleautomation,
		helpstring("IAttachmentManger Interface"),
		pointer_default(unique)
	]
	interface IAttachmentMangerDisp : IAttachmentManger
	{
		// this is a copmound interface definition used to drive the IDispatch implementation
		// you won't be able to QI for this interface

		// ISOAPTransport interface
		[helpstring("method Send")]    HRESULT Send    ( [in] BSTR endpoint, [in] BSTR Envelope );
		[helpstring("method Receive")] HRESULT Receive ( [in,out] BSTR * characterEncoding, [out,retval] SAFEARRAY(BYTE) * Envelope );
	};

	[
		uuid(C7899023-E487-4268-AE2A-4EC50136DAB3),
		helpstring("PocketSOAP Attachments Manager class")
	]
	coclass CoAttachmentManager
	{		
		[default] interface IAttachmentManger;
		interface ISOAPTransport ;
		interface ISoapAttachmentFormat ;
	};

	[
		uuid(AC85F9B4-28D6-408D-AED3-65EC93D89C0F),
		helpstring("PocketSOAP Attachment Class")
	]
	coclass CoSoapAttachment
	{
		[default] interface ISoapAttachment;
		interface ISoapAttachmentFormat ;
	};

	typedef [public, v1_enum] enum pocketSOAPAttachmentErrors
	{
		[helpstring("The received content-type is invalid")]					
		E_INVALID_CONTENTTYPE	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4401),

		[helpstring("The start attribute of the received content-type is missing")]					
		E_START_MISSING			= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4402),

		[helpstring("The boundary attribute of the received content-type is missing")]					
		E_BOUNDARY_MISSING		= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4403),

		[helpstring("The boundary couldn't be found in the message body")]					
		E_BOUNDARY_NOTFOUND		= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4404),

		[helpstring("The received Content-Transfer-Encoding is not supported")]					
		E_ENCODING_NOT_SUP		= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4405),
		
		[helpstring("The transport specified does not support attachments")]					
		E_INVALID_TRANSPORT		= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4406),

	} pocketSOAPAttachmentErrors ;
};
