// ISoapProxyBaseImpl.h: interface for the ISoapProxyBaseImpl class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_ISOAPPROXYBASEIMPL_H__7F97E0ED_0335_4715_85F8_89BB357B4F7B__INCLUDED_)
#define AFX_ISOAPPROXYBASEIMPL_H__7F97E0ED_0335_4715_85F8_89BB357B4F7B__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

class ISoapProxyBaseImpl 
{
public:
	ISoapProxyBaseImpl() { }
	virtual ~ISoapProxyBaseImpl() { }

protected:
	CComBSTR						   m_url;
	CComPtr<ISOAPTransport>			   m_tp;
	CComPtr<ISerializerFactoryConfig2> m_sf;

	virtual void ConfigSerializerFactory() = 0 ;

	//ISoapProxyBase
	HRESULT get_Transport(ISOAPTransport ** Transport)
	{
		if(!m_tp)
			m_tp.CoCreateInstance(__uuidof(HTTPTransport));
		return m_tp.CopyTo(Transport);
	}
	
	HRESULT putref_Transport(ISOAPTransport * Transport)
	{
		m_tp = Transport;
		return S_OK;
	}
	
	HRESULT get_Url(BSTR *Url)
	{
		return m_url.CopyTo(Url);
	}
	
	HRESULT put_Url(BSTR Url)
	{
		m_url = Url;
		return S_OK;
	}
	
	HRESULT get_SerializerFactory(ISerializerFactoryConfig2 **Factory)
	{
		if(!m_sf)
			ConfigSerializerFactory();
		return m_sf.CopyTo(Factory);
	}
	
	HRESULT putref_SerializerFactory(ISerializerFactoryConfig2 *Factory)
	{
		m_sf = Factory;
		return S_OK;
	}
	
	HRESULT SendRecv(ISOAPEnvelope * env, CComBSTR &soapAction)
	{
		CComPtr<ISOAPTransport> trans;
		get_Transport(&trans);
		CComQIPtr<IHTTPTransport> http(trans);
		if(http)
			http->put_SOAPAction(soapAction);
	
		// todo: detect PS1.5 and do the right thing.
		CComBSTR sEnv, enc;
		HRESULT hr = env->Serialize(&sEnv);
		if(FAILED(hr)) return hr;
		hr = trans->Send(m_url, sEnv);
		if(FAILED(hr)) return hr;
		sEnv.Empty();
		return env->Parse(CComVariant(trans), enc);
	}
	
	CComPtr<ISOAPEnvelope> newEnvelope(CComBSTR &methodName, CComBSTR &ns, HRESULT &hr)
	{
		CComPtr<ISOAPEnvelope> env;
		hr = env.CoCreateInstance(__uuidof(CoEnvelope));
		CComPtr<ISerializerFactoryConfig2> sfc;
		get_SerializerFactory(&sfc);
		if(env)
		{
			env->putref_SerializerFactory(sfc);
			env->SetMethod(methodName, ns);
		}
		return env;
	}
	
	CComPtr<ISOAPNode> extractRetValNode(ISOAPEnvelope *env)
	{
		CComPtr<ISOAPNode> node;
		CComPtr<ISOAPNodes> params;
		env->get_Parameters(&params);
		params->get_Item(0, &node);
		return node;
	}
	
	HRESULT extractRetVal(ISOAPEnvelope *env, VARIANT *pVal)
	{
		return extractRetValNode(env)->get_Value(pVal);
	}

	HRESULT extractRetVal(ISOAPEnvelope *env, CComBSTR &type, CComBSTR &ns, VARIANT *pVal)
	{
		return extractRetValNode(env)->get_ValueAs(type, ns, pVal);
	}

	HRESULT extractRetValBSTR(ISOAPEnvelope *env, CComBSTR &type, CComBSTR &ns, BSTR *pVal)
	{
		// note that we don't clear the variant up in this case as we're
		// effectively transfering ownership of the BSTR to the calling code
		VARIANT v;
		VariantInit(&v);
		_HR(extractRetVal(env, type, ns, &v));
		*pVal = v.bstrVal;
		return S_OK;
	}

	HRESULT extractRetValSAFEARRAY(ISOAPEnvelope *env, CComBSTR &type, CComBSTR &ns, SAFEARRAY **pVal)
	{
		// note that we don't clear the variant up in this case as we're
		// effectively transfering ownership of the SAFEARRAY to the calling code
		VARIANT v;
		VariantInit(&v);
		_HR(extractRetVal(env, type, ns, &v));
		*pVal = v.parray;
		return S_OK;
	}

	HRESULT extractRetValVARIANT(ISOAPEnvelope *env, CComBSTR &type, CComBSTR &ns, VARIANT *pVal)
	{
		return extractRetVal(env, type, ns, pVal);	
	}

	template<class T>
	HRESULT extractRetValInterface(ISOAPEnvelope *env, CComBSTR &type, CComBSTR &ns, T **pVal)
	{
		CComVariant v;
		_HR(extractRetVal(env, type, ns, &v));
		return v.punkVal->QueryInterface(__uuidof(*pVal), (void **)pVal);
	}
	
#define extractRetValImpl(RV_TYPE, VT_FIELD) HRESULT extractRetVal##RV_TYPE(ISOAPEnvelope *env, CComBSTR &type, CComBSTR &ns, ##RV_TYPE *pVal) \
	{ \
		CComVariant v; \
		_HR(extractRetVal(env, type, ns, &v)); \
		*pVal = v.##VT_FIELD; \
		return S_OK; \
	} \

	extractRetValImpl(float, 		fltVal)
	extractRetValImpl(double, 		dblVal)
	extractRetValImpl(LONGLONG,		llVal)
	extractRetValImpl(long,   		lVal)
	extractRetValImpl(short,  		iVal)
	extractRetValImpl(char,   		cVal)
	extractRetValImpl(ULONGLONG,	ullVal)
	extractRetValImpl(ULONG,  		ulVal)
	extractRetValImpl(USHORT, 		uiVal)
	extractRetValImpl(BYTE,   		bVal)
	extractRetValImpl(DATE, 		date)
	extractRetValImpl(VARIANT_BOOL,	boolVal)
};

#endif // !defined(AFX_ISOAPPROXYBASEIMPL_H__7F97E0ED_0335_4715_85F8_89BB357B4F7B__INCLUDED_)
