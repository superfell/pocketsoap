/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is pocketHTTP

The Initial Developer of the Original Code is Simon Fell.
Portions created by Simon Fell are Copyright (C) 2003-2006
Simon Fell. All Rights Reserved.

Contributor(s):
	Chris P. Vigelius	- FileStreamReaderFactory
*/

// This file will be processed by the MIDL tool to
// produce the type library (pocketHTTP.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

#include <winerror.h>	// for MAKE_HRESULT

[
	object,
	uuid(803F5817-1DA0-47e5-9D0D-6CBF32E1785F),
	local,
	helpstring("IReadableStream Interface"),
	pointer_default(unique)
]
interface IReadableStream : IUnknown
{	
	// returns *pcbRead == 0 at the end of the stream
	[helpstring("Read bytes from the stream")]
	HRESULT Read(	void *pv,			// Pointer to buffer into which the stream is read
					ULONG cb,			// Specifies the number of bytes to read
					ULONG *pcbRead );	// Pointer to location that contains actual
										// number of bytes read
} ;

[
	object,
	uuid(45887010-BA0C-4282-932C-679F6ACF8141),
	local,
	helpstring("IResetableStream Interface"),
	pointer_default(unique)
]
interface IResetableStream : IReadableStream
{
	[helpstring("resets the current position in the stream back to the begining.")]
	HRESULT Reset() ;
} ;

[
	object,
	uuid(7674D326-1FB5-40eb-AEAF-D56170FA2D7C),
	oleautomation,
	helpstring("IHeader Interface"),
	pointer_default(unique)
]
interface IHeader : IUnknown
{
	// this represents a single http header
	[propget, id(DISPID_VALUE)] HRESULT Value ( [out,retval] BSTR *header ) ;
	[propput, id(DISPID_VALUE)] HRESULT Value ( [in]		 BSTR  header ) ;
	
	[propget] HRESULT Name ( [out,retval] BSTR * name ) ;
	[propput] HRESULT Name ( [in] BSTR name ) ;

	// this lets you work with headers that have attributes, e.g.
	// content-type: text/xml; charset=utf-8
	// this would return an attributecount of 2
	// attribute("") returning text/xml 
	// attriubte("charset") returning utf-8 
	[propget] HRESULT AttributeCount ( [out,retval] long * count ) ;
	[propget] HRESULT Attribute ( [in] BSTR attributeName, [out,retval] BSTR * value ) ;
	[propput] HRESULT Attribute ( [in] BSTR attributeName, [in] BSTR newValue ) ;
} ;

[
	object,
	uuid(A70C7273-FB5B-43b3-BB48-BC8D6E64EB3D),
	oleautomation,
	helpstring("IHeadersCollection Interface"),
	pointer_default(unique)
]
interface IHeadersCollection : IUnknown
{
	[propget, id(DISPID_NEWENUM), helpstring("property _NewEnum")] 
	HRESULT _NewEnum([out, retval] IUnknown **pVal);

	[propget] HRESULT Count ( [out,retval] long * numHeaders ) ;
	[propget] HRESULT Item  ( [in] long index, [out,retval] IHeader ** ppHeader ) ;

	HRESULT Create ( [in] BSTR name, [in] BSTR value, [out,retval] IHeader ** pNewHeader ) ;

	// returns the first header we find with this name
	HRESULT Find   ( [in] BSTR name, [out,retval] IHeader ** ppHeader ) ;
} ;

[
	object,
	uuid(F17B3D83-7D1C-40ed-817E-C86654E1A1AC),
	oleautomation,
	helpstring("IHttpResponse Interface"),
	pointer_default(unique)
]
interface IHttpResponse : IUnknown
{	
	[propget, helpstring("returned HTTP Status Code")]	
	HRESULT StatusCode ( [out,retval] short * statusCode ) ;

	// different ways to access the response message
	// use only one, and use it just once
	// the first two are just adapters on top of the stream
	
	// string will transcode to unicode using the charset on the content-type header
	[propget] HRESULT String	([out,retval] BSTR * responseString) ;
	[propget] HRESULT Bytes		([out,retval] SAFEARRAY(BYTE) * byteArray) ;
	[propget] HRESULT Stream	([out,retval] IReadableStream ** stm) ;

	// response headers
	[propget] HRESULT Headers	([out,retval] IHeadersCollection ** ppCol ) ;

	[helpstring("saves the HTTP response body to a file")] HRESULT SaveAs ( [in] BSTR filename);
} ;

[
	object,
	uuid(641495B8-EE9D-468a-B060-B8D84C095EF3),
	oleautomation,
	helpstring("IHttpRequest Interface"),
	pointer_default(unique)
]
interface IHttpRequest : IUnknown
{
	// defaults to GET
	[propput, helpstring("HTTP Method Verb to use")] HRESULT Method ( [in]			BSTR newMethodToUse ) ;
	[propget, helpstring("HTTP Method Verb to use")] HRESULT Method ( [out,retval]	BSTR *MethodInUse   ) ;

	// replace with headers collection
	[propget] HRESULT Headers ( [out,retval] IHeadersCollection ** headers ) ;

	[helpstring("method GetResponse")]		
	HRESULT GetResponse ( [in] BSTR endpoint, [in] VARIANT RequestBody, [out,retval] IHttpResponse ** res );

	[helpstring("Enable proxy support via this server / port")]		  HRESULT SetProxy( [in] BSTR ProxyServer, [in] short ProxyPort ) ;
	[helpstring("Disable proxy usage")]								  HRESULT NoProxy () ;
	[helpstring("Set the authentication credentials")]				  HRESULT Authentication      ( [in] BSTR username, [in] BSTR password ) ;
	[helpstring("Sets the authentication credentials for the proxy")] HRESULT ProxyAuthentication ( [in] BSTR username, [in] BSTR password ) ;
	[propput, helpstring("send/receive timeout in milliseconds")]	  HRESULT Timeout ( [in] long timeOut )   ;
	[propget, helpstring("send/receive timeout in milliseconds")]	  HRESULT Timeout ( [out,retval] long * timeOut ) ;

	// enable / disable compression support
	// control redirect follow depth	
	[propget, helpstring("get named option value")]					  HRESULT Option ( [in] BSTR optionName, [out,retval] VARIANT * pVal ) ;
	[propput, helpstring("set named option value")]					  HRESULT Option ( [in] BSTR optionName, [in] VARIANT val ) ;
};

[
	object,
	uuid(CFDE91EF-620B-4730-AEE1-BD9C2E89E020),
	oleautomation,
	helpstring("IHttpRequestSplit Interface"),
	pointer_default(unique)
]
interface IHttpRequestSplit : IUnknown
{
	// this splits the send/response processing, so that you can do something 
	// else whilst the server gets its game on
	HRESULT Send	 ( [in] BSTR endpoint, [in] VARIANT RequestBody ) ;
	HRESULT Response ( [out,retval] IHttpResponse ** res ) ;
} ;

[
	object,
	uuid(DA905908-FCE5-4096-9BEE-7492FB4A1159),
	oleautomation,
	helpstring("IHeadersCollection2 Interface"),
	pointer_default(unique)
]
interface IHeadersCollection2 : IHeadersCollection
{
	HRESULT Delete ( [in] IHeader * pHeader ) ;
} ;

[
	object,
	uuid(A689E8FF-D245-4ae0-9AE0-9BF239633FE7),
	oleautomation,
	helpstring("IHeader2 Interface"),
	pointer_default(unique)
]
interface IHeader2 : IHeader
{
	HRESULT Delete () ;
} ;

[
	object,
	uuid(D67EF9A5-50E3-4b62-91C5-215F81F0F1FC),
	oleautomation,
	helpstring("IReadableStreamVB Interface"),
	pointer_default(unique)
]
interface IReadableStreamVB : IUnknown
{	
	// returns *pcbRead == 0 at the end of the stream
	[helpstring("Read bytes from the stream")]
	HRESULT ReadBytes( [in] long numBytesToRead, [out,retval] SAFEARRAY(BYTE) * byteArray ) ;
} ;

[
	object,
	uuid(5923A016-ED77-4cde-8D33-C16FDB1710C4),
	oleautomation,
	helpstring("IFileReaderFactory Interface"),
	pointer_default(unique)
]
interface IFileReaderFactory : IUnknown
{	
	HRESULT CreateReaderFromFile  ([in] BSTR path,          [out, retval] IUnknown ** pReader);
	HRESULT CreateReaderFromHandle([in] OLE_HANDLE hHandle, [out, retval] IUnknown ** pReader);
} ;

[
	object,
	uuid(14B77C3E-E605-418b-B41B-95F650CFDF7F),
	oleautomation,
	helpstring("ICookie Interface"),
	pointer_default(unique)
]
interface ICookie : IUnknown
{	
	[propget] HRESULT Name   ( [out,retval]	BSTR * pValue ) ;
	[propget] HRESULT Value  ( [out,retval]	BSTR * pValue ) ;
	[propget] HRESULT Path   ( [out,retval]	BSTR * pValue ) ;
	[propget] HRESULT Domain ( [out,retval]	BSTR * pValue ) ;
} ;

[
	object,
	uuid(0EA881E8-55FA-43ba-AEBF-C19657987B35),
	oleautomation,
	helpstring("ICookieCollection Interface"),
	pointer_default(unique)
]
interface ICookieCollection : IUnknown
{
	[propget, id(DISPID_NEWENUM), helpstring("property _NewEnum")] 
	HRESULT _NewEnum([out, retval] IUnknown **pVal);

	[propget] HRESULT Count ( [out,retval] long * numCookies ) ;
	[propget] HRESULT Item  ( [in] long index, [out,retval] ICookie ** ppCookie ) ;

	[helpstring("Creates or updates a cookies")]
	HRESULT SetCookie ([in] BSTR name, [in] BSTR Value, [in] BSTR Path, [in] BSTR Domain) ;

	[helpstring("Copy all the cookies from the supplied collection")]
	HRESULT Copy ([in] ICookieCollection * cookies);
} ;

[
	uuid(AF2EB73C-E028-4307-BE71-E6C40306AD63),
	version(1.0),
	helpstring("PocketHTTP 1.3.3 Type Library")
]

library PocketHTTP
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(F16C67B8-CBA8-413c-9BEA-844161D2B880),
		helpstring("PocketHTTP Request Class")
	]
	coclass CoPocketHTTP
	{
		interface IHttpRequest;
		interface IHttpRequestSplit ;
	};

	[
		uuid(197F4BE0-FFAC-4e96-8A49-BA2BE3B91FB0),
		helpstring("PocketHTTP FileReaderFactory Class")
	]
	coclass CoFileReaderFactory
	{
		[default] interface IFileReaderFactory;		
	};

	typedef [public, v1_enum] enum PocketHTTPErrors
	{
		[helpstring("An SSL related failure")]					
		E_SSL_FAILURE		= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4301),

		[helpstring("An error occurred whilst compressing the request")]
		E_DEFLATE_FAILURE 	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4302),

		[helpstring("An error occurred whilst un-compressing the response")]
		E_INFLATE_FAILURE 	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4303),

		[helpstring("The Payload type is invalid, use a string, byte array or stream for the payload")]
		E_INVALID_PAYLOAD 	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4304),

		[helpstring("The requests are too large")]
		E_TOO_MANY_HEADERS 	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4305),

		[helpstring("no connection, must call Send before calling receive")]
		E_CALL_SEND_FIRST	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4306),

		[helpstring("didn't get any response from the server")]
		E_NO_RESPONSE		= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4307),

		[helpstring("Response message from server isn't HTTP")]
		E_NOT_HTTP			= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4308),

		[helpstring("Unexpected status code returned by server")]
		E_STATUS_ERROR		= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4309),

		[helpstring("Missing Content-Length header in response")]
		E_NO_CONTENT_LENGTH	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x430A),

		[helpstring("The transfer encoding returned by the server isn't supported")]
		E_UNSUPPORTED_TE	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x430B),

		[helpstring("The content encoding returned by the server isn't supported")]
		E_UNSUPPORTED_CE	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x430C),

		[helpstring("Redirect on POST dis-allowed")]
		E_NO_FOLLOW			= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x430D),

		[helpstring("Maximum number of redirects followed")]
		E_MAX_REDIRECTS		= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x430E),

		[helpstring("Redirect status code returned, but no Lccation header found")]
		E_NO_LOCATION		= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x430F),
		
		[helpstring("Invalid URL specified")]
		E_INVALID_URL		= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4310),
		
		[helpstring("Error establishing SSL connection via proxy")]
		E_PROXY_CONNECT_FAILED	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4311),

		[helpstring("The GZIP header is invalid")]
		E_GZIP_HEADER_INVALID	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4312),

		[helpstring("The CRC we calculated from the data doesn't match the CRC provided by the server")]
		E_GZIP_CRC_ERROR	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4313),

		[helpstring("The data length we calculated doesn't match the length provided by the server")]
		E_GZIP_SIZE_ERROR	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4314),

		[helpstring("The value for the compression method is invalid")]
		E_INVALID_COMP_METHOD	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4315),

		[helpstring("The returned UTF-8 data has an invalid byte sequence for UTF-8 encoded data")]
		E_INVALID_UTF8_BYTES	= MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x4316)


	} PocketHTTPErrors ;

	interface IHeadersCollection2;
	interface IHeader2;
	interface IReadableStreamVB;
	interface ICookie;
	interface ICookieCollection;
};
